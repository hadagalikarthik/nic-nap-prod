name: "NGINX NIC/NAP-V5 GCP Deployment"
on:
  push:
    branches: gcp-apply-nic-napv5
env:
  TF_VAR_GCP_BUCKET_NAME: ${{ vars.TF_VAR_GCP_BUCKET_NAME }}
  TF_VAR_GCP_REGION: ${{ vars.TF_VAR_GCP_REGION }}
  TF_VAR_project_prefix: ${{ vars.TF_VAR_PROJECT_PREFIX }}
  TF_VAR_GCP_PROJECT_ID: ${{ secrets.TF_VAR_GCP_PROJECT_ID }}
  TF_VAR_GOOGLE_CREDENTIALS: ${{ secrets.TF_VAR_GOOGLE_CREDENTIALS }}
  WORKSPACE_PATH: "./GCP/nap"
  nginx_jwt: ${{ secrets.NGINX_JWT }}

jobs:
  terraform_bootstrap:
    name: "GCP Bucket"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./GCP/gcs
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Google Cloud Authentication
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.TF_VAR_GOOGLE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Initialize Terraform
        run: terraform init

      - name: Terraform Plan
        run: terraform plan -no-color -input=false -out=tfplan

      - name: Check for Changes
        id: check_changes
        run: |
          if grep -q "No changes." <(terraform show -no-color tfplan); then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/gcp-apply-nic-napv5' && steps.check_changes.outputs.has_changes == 'true'
        run: terraform apply -auto-approve tfplan

  terraform_infra:
    name: "GCP Infra"
    runs-on: ubuntu-latest
    needs:  terraform_bootstrap
    permissions:
      contents: read
    defaults:
      run:
        working-directory: ./GCP/infra

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Google Cloud Authentication
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.TF_VAR_GOOGLE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Initialize Terraform (GCS Backend)
        run: |
          terraform init \
            -backend-config="bucket=$TF_VAR_GCP_BUCKET_NAME"

      - name: Terraform Plan
        if: github.event_name == 'pull_request' || github.event_name == 'push'
        run: |
          terraform plan -no-color -input=false -out=tfplan
          terraform show -no-color tfplan > plan.txt

      - name: Check for Changes
        id: check_changes
        run: |
          if grep -q "No changes." <(terraform show -no-color tfplan); then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/gcp-apply-nic-napv5' && steps.check_changes.outputs.has_changes == 'true'
        run: terraform apply -auto-approve tfplan

  terraform_gke:
    name: "GCP GKE"
    runs-on: ubuntu-latest
    needs: terraform_infra
    defaults:
      run:
        working-directory: ./GCP/gke
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Google Cloud Authentication
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.TF_VAR_GOOGLE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Initialize Terraform (GCS Backend)
        run: |
          terraform init \
            -backend-config="bucket=$TF_VAR_GCP_BUCKET_NAME"

      - name: Terraform Plan
        if: github.event_name == 'pull_request' || github.event_name == 'push'
        run: |
          terraform plan -no-color -input=false  -out=tfplan
          terraform show -no-color tfplan > plan.txt

      - name: Check for Changes
        id: check_changes
        run: |
          if grep -q "No changes." <(terraform show -no-color tfplan); then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/gcp-apply-nic-napv5' && steps.check_changes.outputs.has_changes == 'true'
        run: terraform apply -auto-approve tfplan

  terraform_nap:
    name: "NGINX App Protect"
    runs-on: ubuntu-latest
    needs: terraform_gke
    defaults:
      run:
        working-directory: ./GCP/nap
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Google Cloud Authentication
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.TF_VAR_GOOGLE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Initialize Terraform (GCS Backend)
        run: |
          terraform init \
            -backend-config="bucket=$TF_VAR_GCP_BUCKET_NAME"

      - name: Terraform Plan
        if: github.event_name == 'pull_request' || github.event_name == 'push'
        run: |
          terraform plan -no-color -input=false -lock=false -out=tfplan \
            -var="workspace_path=${{ env.WORKSPACE_PATH }}" \
            -var="nginx_jwt=${{ secrets.NGINX_JWT }}" \
            -var="nginx_pwd=none"
          terraform show -no-color tfplan > plan.txt

      - name: Check Changes
        id: check_changes
        run: |
          if grep -q "No changes." plan.txt; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/gcp-apply-nic-napv5' && steps.check_changes.outputs.has_changes == 'true'
        run: terraform apply -auto-approve -lock=false tfplan

  terraform_policy:
    name: "NGINX Policy"
    runs-on: ubuntu-latest
    needs: terraform_nap
    defaults:
      run:
       working-directory: ./GCP/policy
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Google Cloud Authentication
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.TF_VAR_GOOGLE_CREDENTIALS }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Terraform Init (GKE)
      run: |
        terraform init \
          -backend-config="bucket=$TF_VAR_GCP_BUCKET_NAME"
      working-directory: ./GCP/gke

    - name: Print GKE Terraform Outputs
      run: terraform output
      working-directory: ./GCP/gke

    - name: Authenticate to Google Cloud
      run: |
        echo "$TF_VAR_GOOGLE_CREDENTIALS" | gcloud auth activate-service-account --key-file=-

    - name: Fetch GKE Cluster Name and Region
      run: |
        echo "GKE_CLUSTER_NAME=$data.terraform_remote_state.gke.outputs.kubernetes_cluster_name" >> $GITHUB_ENV
        echo "GCP_REGION=$TF_VAR_GCP_REGION" >> $GITHUB_ENV
      working-directory: ./GCP/gke

    - name: Install gke-gcloud-auth-plugin
      run: |
        sudo apt-get update
        sudo apt-get install apt-transport-https ca-certificates gnupg curl
        curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
        echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
        sudo apt-get update && sudo apt-get install google-cloud-cli
        sudo apt-get install google-cloud-cli-gke-gcloud-auth-plugin

    - name: Configure kubectl for GKE
      run: |
        gcloud container clusters get-credentials ${{ env.TF_VAR_project_prefix }}-gke --region $GCP_REGION --project $TF_VAR_GCP_PROJECT_ID

    - name: Verify kubectl connectivity
      run: kubectl get nodes -n nginx-ingress

    - name: Install Docker and Docker Compose
      run: |
        sudo apt-get update -y
        sudo apt-get remove -y containerd containerd.io
        sudo apt-get install apt-transport-https ca-certificates curl software-properties-common -y
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
        sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
        sudo apt-get update -y
        sudo apt-get install docker-ce docker-ce-cli containerd.io -y
        sudo service docker start
        sudo usermod -aG docker $USER

        sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose

    - name: Create Certificates Directory for Docker
      run: |
        sudo mkdir -p /etc/docker/certs.d/private-registry.nginx.com

    - name: Create NGINX Repository Certificate for Docker
      run: echo "${{ secrets.NGINX_REPO_CRT }}" | sudo tee /etc/docker/certs.d/private-registry.nginx.com/client.cert > /dev/null

    - name: Create NGINX Repository Key for Docker
      run: echo "${{ secrets.NGINX_REPO_KEY }}" | sudo tee /etc/docker/certs.d/private-registry.nginx.com/client.key > /dev/null

    - name: Create Certificates Directory for NGINX
      run: |
        sudo mkdir -p /etc/ssl/nginx

    - name: Save NGINX Repository Certificate for NGINX
      run: echo "${{ secrets.NGINX_REPO_CRT }}" | sudo tee /etc/ssl/nginx/nginx-repo.crt > /dev/null

    - name: Save NGINX Repository Key for NGINX
      run: echo "${{ secrets.NGINX_REPO_KEY }}" | sudo tee /etc/ssl/nginx/nginx-repo.key > /dev/null

    - name: Build Docker Image
      run: |
        docker build --no-cache \
          --secret id=nginx-crt,src=/etc/ssl/nginx/nginx-repo.crt \
          --secret id=nginx-key,src=/etc/ssl/nginx/nginx-repo.key \
          -t waf-compiler-5.4.0:custom .

    - name: Ensure correct permissions for nap/charts directory
      run: |
        sudo chown -R $USER:$USER ${{ github.workspace }}/GCP
        sudo chmod -R 777 ${{ github.workspace }}/GCP

    - name: Run Docker Container as Root
      run: |
        docker run --rm \
            -v ${{ github.workspace }}/GCP:/workspace \
              waf-compiler-5.4.0:custom \
            -p /workspace/policy/policy.json -o /workspace/policy/compiled_policy.tgz

    - name: Fix permissions for compiled files
      run: |
        sudo chown -R $USER:$USER ${{ github.workspace }}/GCP/policy
        chmod 644 ${{ github.workspace }}/GCP/policy/compiled_policy.tgz
        ls -lh ${{ github.workspace }}/GCP/policy

    - name: Copy Compiled Policy to NGINX Ingress Controller
      run: |
        NGINX_POD=$(kubectl get pods -n nginx-ingress -l app.kubernetes.io/name=nginx-ingress -o jsonpath='{.items[0].metadata.name}')
        if [ -z "$NGINX_POD" ]; then
          echo "Error: NGINX Ingress Controller pod not found!"
          exit 1
        fi
        kubectl cp ${{ github.workspace }}/GCP/policy/compiled_policy.tgz $NGINX_POD:/etc/app_protect/bundles/compiled_policy.tgz -n nginx-ingress

    - name: Initialize Terraform (GCS Backend)
      run: |
        terraform init \
          -backend-config="bucket=$TF_VAR_GCP_BUCKET_NAME"

    - name: Terraform Plan
      run: |
        terraform plan -no-color -input=false -out=tfplan
        terraform show -no-color tfplan > plan.txt

    - name: Check Changes
      id: check_changes
      run: |
        if grep -q "No changes." plan.txt; then
          echo "has_changes=false" >> $GITHUB_OUTPUT
        else
          echo "has_changes=true" >> $GITHUB_OUTPUT
        fi

    - name: Terraform Apply
      if: github.event_name == 'push' && github.ref == 'refs/heads/gcp-apply-nic-napv5' && steps.check_changes.outputs.has_changes == 'true'
      run: terraform apply -auto-approve tfplan

  terraform_arcadia:
    name: "Arcadia WebApp"
    runs-on: ubuntu-latest
    needs: terraform_policy
    defaults:
      run:
        working-directory: ./GCP/arcadia
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Google Cloud Authentication
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.TF_VAR_GOOGLE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Initialize Terraform (GCS Backend)
        run: |
          terraform init \
            -backend-config="bucket=$TF_VAR_GCP_BUCKET_NAME"

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Plan
        if: github.event_name == 'pull_request' || github.event_name == 'push'
        run: |
          terraform plan -no-color -input=false -out=tfplan
          terraform show -no-color tfplan > plan.txt

      - name: Check Changes
        id: check_changes
        run: |
          if grep -q "No changes." plan.txt; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/gcp-apply-nic-napv5' && steps.check_changes.outputs.has_changes == 'true'
        run: terraform apply -auto-approve tfplan

      - name: Get Terraform Outputs
        run: |
          terraform output -json > outputs.json
          EXTERNAL_NAME=$(jq -r '.external_name.value // empty' outputs.json)

          if [ -z "$EXTERNAL_NAME" ]; then
            echo "::warning::No external_name output found"
          else
            echo "external_name=$EXTERNAL_NAME" >> $GITHUB_ENV
            echo "NGINX Ingress External Name: $EXTERNAL_NAME"
          fi